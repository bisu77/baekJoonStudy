package bruteforce;

import java.util.Arrays;
import java.util.Scanner;

/**
 * @문제
 * 왕비를 피해 일곱 난쟁이들과 함께 평화롭게 생활하고 있던 백설공주에게 위기가 찾아왔다. 일과를 마치고 돌아온 난쟁이가 일곱 명이 아닌 아홉 명이었던 것이다.
 * 아홉 명의 난쟁이는 모두 자신이 "백설 공주와 일곱 난쟁이"의 주인공이라고 주장했다. 뛰어난 수학적 직관력을 가지고 있던 백설공주는, 다행스럽게도 일곱 난쟁이의 키의 합이 100이 됨을 기억해 냈다.
 * 아홉 난쟁이의 키가 주어졌을 때, 백설공주를 도와 일곱 난쟁이를 찾는 프로그램을 작성하시오.
 * 
 * @입력
 * 아홉 개의 줄에 걸쳐 난쟁이들의 키가 주어진다. 주어지는 키는 100을 넘지 않는 자연수이며, 아홉 난쟁이의 키는 모두 다르며, 
 * 가능한 정답이 여러 가지인 경우에는 아무거나 출력한다.
 * 
 * @출력
 * 일곱 난쟁이의 키를 오름차순으로 출력한다. 일곱 난쟁이를 찾을 수 없는 경우는 없다.
 * 
 * @예제입력
 * 20
 * 7
 * 23
 * 19
 * 10
 * 15
 * 25
 * 8
 * 13
 * 
 * @예제출력
 * 
 * 7
 * 8
 * 10
 * 13
 * 19
 * 20
 * 23
 */
public class Exercise_2309 {
	// 1) idx 2개 제외 후 합산 방식
	// 2) 모두 합산 후 나머지 차이 값 idx 찾기
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int[] nan9height = new int[9];
		int[] nan7height = new int[7];
		int heightSum 	 = 0;
		int nanLier1  	 = 0;
		int nanLier2  	 = 0;
		
		/* ========================================================== */
		/* 					 	합산 후 차이 값 idx 찾기 				  	  */
		/* ========================================================== */
		int overHeight	 = 0;
		for(int i=0;i<9;i++){
			nan9height[i] = sc.nextInt();
			heightSum += nan9height[i];
		}
		
		overHeight = heightSum - 100;
		
		try {
			for(int i=0;i<9;i++) {
				for(int j=(i+1);j<9;j++) {
					int sum = nan9height[i] + nan9height[j];

					if(overHeight==sum) {
						nanLier1 = i;
						nanLier2 = j;
						throw new Exception("find lier nanjang");
					}
				}
			}
		}catch(Exception e) {
			int idx = 0;
			for(int i=0;i<9;i++){
				if(i==nanLier1 || i==nanLier2) {
					continue;
				}
				nan7height[idx++] = nan9height[i];
			}

			Arrays.sort(nan7height);

			for(int i=0;i<7;i++){
				System.out.println(nan7height[i]);
			}
		}

		/* ========================================================== */
		/* 					 idx 2개 제외 후 합산 방식 					  */
		/* ========================================================== */
		/*
		for(int i=0;i<9;i++){
			nan9height[i] = sc.nextInt();
		}

		try{
			for(int i=0;i<9;i++){
				for(int j=(i+1);j<9;j++){
					heightSum = 0;
					for(int k=0;k<9;k++){
						if(i==k) {
							nanLier1 = i;
							continue;
						}
						if(j==k) {
							nanLier2 = j;
							continue;
						}
						heightSum += nan9height[k];
					}
					if(heightSum==100){
						throw new Exception("find lier nanjang");
					}
				}
			}
		}catch(Exception e){
			int idx = 0;
			for(int i=0;i<9;i++){
				if(i==nanLier1 || i==nanLier2) {
					continue;
				}
				nan7height[idx++] = nan9height[i];
			}

			Arrays.sort(nan7height);

			for(int i=0;i<7;i++){
				System.out.println(nan7height[i]);
			}
		}
		*/
	}
}
